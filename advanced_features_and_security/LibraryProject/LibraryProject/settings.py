"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-h(lk$3!k+c3lp6_s6ht!w3_s1y(tiam&%log$g24p(^u^87&yz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',
    'relationship_app',
    'csp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware'
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# ------------------
# SECURITY SETTINGS
# ------------------

#    CSRF_COOKIE_SECURE: Ensures the CSRF cookie is only sent over HTTPS.
#    Crucial for production when HTTPS is enabled.
#    Set to True in production if using HTTPS.
CSRF_COOKIE_SECURE = True # Set to True for production with HTTPS!

#    SESSION_COOKIE_SECURE: Ensures the session cookie is only sent over HTTPS.
#    Crucial for production when HTTPS is enabled.
#    Set to True in production if using HTTPS.
SESSION_COOKIE_SECURE = True # Set to True for production with HTTPS!

#    SECURE_BROWSER_XSS_FILTER: Activates the browser's XSS filter.
#    Django adds an X-XSS-Protection: 1; mode=block header.
#    Always set to True.
SECURE_BROWSER_XSS_FILTER = True

#    SECURE_CONTENT_TYPE_NOSNIFF: Prevents browsers from MIME-sniffing content.
#    Adds an X-Content-Type-Options: nosniff header.
#    Helps prevent XSS attacks by ensuring browser interprets content types correctly.
#    Always set to True.
SECURE_CONTENT_TYPE_NOSNIFF = True

#    X_FRAME_OPTIONS: Controls whether your site can be embedded in an iframe.
#    This helps prevent clickjacking attacks.
#    'DENY' means nobody can embed your site.
#    'SAMEORIGIN' means only your own site can embed itself.
#    'DENY' is generally more secure if iframes are not needed.
X_FRAME_OPTIONS = 'DENY' # Or 'SAMEORIGIN' if you need to embed your own site

# Optional but highly recommended for production (requires HTTPS setup)
#    SECURE_SSL_REDIRECT: Redirects all non-HTTPS requests to HTTPS.
#    Set to True in production if your site exclusively uses HTTPS.
SECURE_SSL_REDIRECT = True # Uncomment and set to True for production with HTTPS!

# When running behind a proxy that handles SSL, this header tells Django
# that the request was originally secure (HTTPS).
# Essential for SECURE_SSL_REDIRECT to work correctly in production setups with proxies.
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

#    SECURE_HSTS_SECONDS: Enables HTTP Strict Transport Security (HSTS).
#    Tells browsers to only connect to your site via HTTPS for a given duration.
#    Set to a large number (e.g., 31536000 for 1 year) in production.
# SECURE_HSTS_SECONDS = 0 # Set to a large integer for production with HTTPS!

#    SECURE_HSTS_INCLUDE_SUBDOMAINS: Include subdomains in HSTS policy.
#    Set to True if you want HSTS to apply to all subdomains.
SECURE_HSTS_INCLUDE_SUBDOMAINS = True # Set to True for production with HTTPS!

#    SECURE_REFERRER_POLICY: Controls how much referrer information is sent.
#    'same-origin' is a good default for security.
#    See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
# SECURE_REFERRER_POLICY = 'same-origin' # Uncomment for production

# -----------------------
# END SECURITY SETTINGS
# -----------------------

# -----------------------------------------------------------------
# CONTENT SECURITY POLICY (CSP) SETTINGS 
# https://django-csp.readthedocs.io/en/latest/migration-guide.html
# -----------------------------------------------------------------

CONTENT_SECURITY_POLICY = {
    'DIRECTIVES': {
        'default-src': ("'self'",),
        'script-src': ("'self'", "'unsafe-inline'"), # You might need to add specific CDN URLs here
        'style-src': ("'self'", "'unsafe-inline'"),  # You might need to add specific CDN URLs here
        'img-src': ("'self'",), # You might need to add 'data:' or external image hosts
        'font-src': ("'self'",), # You might need to add external font hosts
        'connect-src': ("'self'",),
        'object-src': ("'none'",),
        'frame-src': ("'self'",),
        # 'report-uri': '/csp-report/', # Uncomment if you want to set up reporting
    }
}

# -----------------
# END CSP SETTINGS
# -----------------


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Optional: Where Django will look for static files *within* your apps
# and other specified directories. This is for development.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    # Add any other directories here that contain static files
]

# The absolute path to the directory where `collectstatic` will gather
# all static files for deployment. THIS IS WHAT'S MISSING.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Or Path(BASE_DIR) / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'bookshelf.CustomUser'

# Media files (for profile photos)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'